// Copyright (c) 2025 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef INCLUDE_CACHE_MANAGER_HPP_
#define INCLUDE_CACHE_MANAGER_HPP_

#include <rapidhash.h>
#include <filesystem>
#include <future>
#include <string>
#include <vector>
#include "./fp8_gemm_types.hpp"

namespace fs = std::filesystem;

/**
 * @brief Manages compilation cache for JITted CUDA kernels
 *
 * This class handles storing and retrieving compiled cubin files using
 * rapidhash for cache key generation based on GemmConfig parameters.
 */
class CacheManager {
 public:
  /**
   * @brief Construct a new Cache Manager object
   * @param cache_dir Directory to store cache files
   */
  explicit CacheManager(fs::path cache_dir);

  /**
   * @brief Destroy the Cache Manager object
   *
   * Ensures all asynchronous write operations complete before destruction
   */
  ~CacheManager();

  /**
   * @brief Retrieve cached cubin data if available
   * @param config GEMM configuration to generate cache key
   * @param data Output vector to store retrieved cubin data
   * @return true if cache hit, false if cache miss
   */
  bool get(const GemmConfig& config, std::vector<char>& data);  // NOLINT

  /**
   * @brief Asynchronously store cubin data in cache
   * @param config GEMM configuration to generate cache key
   * @param data Cubin data to store
   */
  void put_async(const GemmConfig& config, const std::vector<char>& data);

  /**
   * @brief Generate a unique hash key for a given configuration
   * @param config GEMM configuration to hash
   * @return 64-bit hash value
   */
  uint64_t generate_key(const GemmConfig& config) const;

 private:
  fs::path cache_dir_;
  std::vector<std::future<void>> write_tasks_;

  /**
   * @brief Convert hash value to filename
   * @param hash Hash value generated by generate_key
   * @return Filename string
   */
  std::string hash_to_filename(uint64_t hash) const;

  /**
   * @brief Synchronously store cubin data in cache
   * @param config GEMM configuration to generate cache key
   * @param data Cubin data to store
   */
  void put_sync(const GemmConfig& config, const std::vector<char>& data);

  /**
   * @brief Ensure cache directory exists
   * @param dir Directory path to check/create
   */
  static void ensure_directory_exists(const fs::path& dir);
};

#endif  // INCLUDE_CACHE_MANAGER_HPP_
